{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"about/","title":"Reflex Clerk API Documentation","text":"<p>Welcome to the Reflex Clerk API documentation! This package provides integration with the Clerk authentication service, allowing you to easily manage user authentication within within your Reflex app.</p>"},{"location":"about/#overview","title":"Overview","text":"<p>Primarily, this package wraps the @clerk/clerk-react library, using the Clerk maintained clerk-backend-api python package to synchronize the reflex FastAPI backend with the Clerk frontend components.</p>"},{"location":"about/#wrapped-components","title":"Wrapped Components","text":"<p>An overview of some of the clerk-react components that are wrapped here:</p> <ul> <li>ClerkProvider: A component that wraps your app/page to handle Clerk authentication.</li> <li>Control Components: Components such as <code>clerk_loaded</code>, <code>protect</code>, and <code>signed_in</code>, etc.</li> <li>Authentication Components: Components for <code>sign_in</code> and <code>sign_up</code> that redirect the user to Clerk's authentication pages.</li> <li>Wrapper Components: Button wrappers for <code>sign_in_button</code>, <code>sign_out_button</code>, and <code>user_button</code>, that you can wrap regular reflex components with.</li> </ul> <p>See more in the features section.</p>"},{"location":"about/#backend-synchronization","title":"Backend synchronization","text":"<p>The <code>ClerkProvider</code> state is set up so that the backend states are synchronized with the Clerk authentication that happens in the frontend. The two main reflex backend states are:</p> <ul> <li>ClerkState: Manages the authentication state of the user.</li> <li>ClerkUser: Optional state for accessing additional user information.</li> </ul> <p>Additionally, you can keep your own states up to date by registering event handlers to be called on authentication changes with e.g. <code>clerk.register_on_auth_change_handler(State.some_handler)</code>.</p>"},{"location":"about/#additional-notes","title":"Additional Notes","text":"<p>This packages:</p> <ul> <li>Is fully asynchronous, using <code>async/await</code> for all requests to the Clerk backend.</li> <li>Supports Reflex 0.7.x.</li> <li>Provides helper functions for handling <code>on_load</code> events that require knowledge of user authentication status.</li> <li>Allows registration of event handlers to be called on authentication changes (login/logout).</li> <li>Is fully typed</li> <li>Is tested against python versions 3.10 - 3.13</li> </ul>"},{"location":"about/#demo","title":"Demo","text":"<p>See a demo of <code>reflex-clerk-api</code> here.</p> <p>The demo uses a development Clerk account so you can try out sign-up/sign-in etc.</p>"},{"location":"about/#quick-links","title":"Quick Links","text":"<p>Additionally, you can find the following resources in the documentation:</p> <ul> <li>Getting Started: Learn how to install and set up the Reflex Clerk API.</li> <li>Migration Guide: Notes on migrating from the <code>Kroo/reflex-clerk</code> package.</li> <li>Features: More details on the additional features provided.</li> </ul>"},{"location":"about/#not-yet-implemented","title":"Not yet implemented","text":"<p>Some of these things are minimally implemented, but not at all tested, and likely without the additional props.</p> <ul> <li>GoogleOneTap</li> <li>Waitlist</li> <li>Organization Components</li> </ul>"},{"location":"features/","title":"Features of Reflex Clerk API","text":"<p>This documentation outlines the key components and functionalities available in the package.</p> <p>See the Reference for more detailed documentation. This is intended to be more of an overview.</p>"},{"location":"features/#reflex-synchronization","title":"Reflex Synchronization","text":"<p><code>reflex-clerk-api</code> ensures that the backend states are synchronized with the Clerk authentication happening in the frontend. The main backend states include:</p> <ul> <li>ClerkState: Manages the authentication state of the user. You'll mostly want the <code>is_signed_in</code> and <code>user_id</code> attributes. Access them from your own event handlers like so:</li> </ul> <pre><code>@rx.event\nasync def some_handler(self):\n    clerk_state = await self.get_state(clerk.ClerkState)\n    user_id = clerk_state.user_id\n    ...\n</code></pre> <ul> <li>ClerkUser: Provides access to additional user information like <code>image_url</code> and <code>email</code>.</li> </ul> <p>Note</p> <p>To enable the <code>ClerkUser</code> state, set <code>clerk_provider(..., register_user_state=True)</code> when wrapping your page.</p> <p>This is not enabled by default since you may want to get the information you need yourself.</p> <p>There is also a helper method for getting more user info.</p>"},{"location":"features/#helper-methods","title":"Helper methods","text":"<ul> <li> <p>On Load Event Handling: Use <code>clerk.on_load(&lt;on_load_events&gt;)</code> to ensure the <code>ClerkState</code> is updated before other <code>on_load</code> events. This ensures that <code>is_signed_in</code> will be accurate.</p> </li> <li> <p>On Auth Change Handlers: Register event handlers that are called on authentication changes (login/logout) using <code>clerk.register_on_auth_change_handler(&lt;handler&gt;)</code>.</p> </li> <li> <p>Get User Info: Use <code>await clerk.get_user(self)</code> within an event handler to get the full Clerk <code>User</code> model.</p> </li> </ul>"},{"location":"features/#clerk-components","title":"Clerk Components","text":"<p>The components implementation largely follows that of the Clerk react overview.</p> <p>The components are dscribed here with their <code>CamelCase</code> names as they are in the clerk react. To use them in your app, use the <code>snake_case</code> versions e.g. <code>clerk.clerk_provider(...)</code>.</p>"},{"location":"features/#clerkprovider","title":"ClerkProvider","text":"<p>The <code>ClerkProvider</code> component should wrap the contents of your app. It is required for the clerk frontend components, and is set up in a way that ensures the reflex backend is synchronized.</p> <p>Note</p> <p>This is additionally wrapped in a custom <code>ClerkSessionSynchronizer</code> component to facilitate the backend synchronization.</p>"},{"location":"features/#authentication-components","title":"Authentication Components","text":"<p>I.e., SignIn and SignUp Components to create customizable sign-in and sign-up forms.</p>"},{"location":"features/#user-components","title":"User Components","text":"<p>For displaying the currently signed in user's information via clerk components.</p> <ul> <li> <p>UserButton: A google style avatar button that opens a dropdown with user info.</p> </li> <li> <p>UserProfile: Displays a user profile with additional information.</p> </li> </ul>"},{"location":"features/#organization-components","title":"Organization Components","text":"<p>These are only minimally implemented, and not tested. If you would like to use these, I will happily accept pull requests.</p>"},{"location":"features/#waitlist-component","title":"Waitlist Component","text":"<p>This is only minimally implemented, and not tested. If you would like to use this, I will happily accept pull requests.</p>"},{"location":"features/#control-components","title":"Control Components","text":"<p>These determine what content is displayed based on the user's authentication state. Use them to wrap parts of your app that should only be displayed under certain circumstances.</p> <ul> <li> <p>ClerkLoaded: Displays content once Clerk is fully loaded.</p> </li> <li> <p>ClerkLoading: Displays content while Clerk is loading.</p> </li> <li> <p>Protect: Protects specific content to ensure only authenticated users can access them.</p> </li> <li> <p>RedirectToSignIn: Redirects users to the sign-in page if they are not authenticated.</p> </li> <li> <p>RedirectToSignUp: Redirects users to the sign-up page if they are not authenticated.</p> </li> <li> <p>RedirectToUserProfile: Redirects users to their profile page.</p> </li> <li> <p>RedirectToOrganizationProfile: Redirects users to their organization profile page.</p> </li> <li> <p>RedirectToCreateOrganization: Redirects users to create an organization.</p> </li> <li> <p>SignedIn and SignedOut: Conditional rendering based on user authentication state.</p> </li> </ul>"},{"location":"features/#unstyled-components","title":"Unstyled Components","text":"<p>Wrap regular reflex components with these to add the Clerk functionality.</p> <ul> <li>SignInButton, SignUpButton, and SignOutButton: Button components to trigger sign-in and sign-out actions.</li> </ul> <p>E.g. <code>clerk.sign_in_button(rx.button(\"Sign in\"))</code></p> <ul> <li>SignInWithMetamaskButton: Not yet implemented.</li> </ul>"},{"location":"features/#demos","title":"Demos","text":"<p>To see these features in action, visit the demo.</p>"},{"location":"getting_started/","title":"Getting Started with Reflex Clerk API","text":"<p>Welcome to the getting started guide for the <code>reflex-clerk-api</code>!</p> <p>You can add <code>Clerk</code> user authentication to your app for free (up to 10,000 users) (Clerk Pricing).</p> <p>This covers the basics to add authentication to your Reflex app.</p>"},{"location":"getting_started/#clerk-api","title":"Clerk API","text":"<p>Sign up for a Clerk account here.</p>"},{"location":"getting_started/#installation","title":"Installation","text":"<p>Installation is the same an any other python package:</p>"},{"location":"getting_started/#using-pip","title":"Using pip","text":"<pre><code>pip install reflex-clerk-api\n</code></pre>"},{"location":"getting_started/#using-a-package-manager","title":"Using a package manager","text":"<pre><code>uv add reflex-clerk-api\n</code></pre> <p>or</p> <pre><code>poetry add reflex-clerk-api\n</code></pre> <p>etc.</p>"},{"location":"getting_started/#basic-setup","title":"Basic Setup","text":"<p>After installation, you can start integrating the Clerk components into your Reflex application.</p>"},{"location":"getting_started/#import-the-package","title":"Import the Package","text":"<p>To use the Reflex Clerk API in your app, start by importing the package:</p> <pre><code>import reflex_clerk_api as clerk\n</code></pre> <p>All examples here assume the package is imported as <code>clerk</code>.</p>"},{"location":"getting_started/#setting-up-clerkprovider","title":"Setting Up ClerkProvider","text":"<p>Typically, you'll wrap whole pages with the <code>ClerkProvider</code> component. This is required for clerk components within to work. This is a minimal example:</p> <pre><code>import os\n\nimport reflex as rx\nimport reflex_clerk_api as clerk\n\ndef index() -&gt; rx.Component:\n    return clerk.clerk_provider(\n        clerk.clerk_loading(\n            rx.spinner(),\n        ),\n        clerk.clerk_loaded(\n            clerk.signed_in(\n                clerk.sign_out_button(rx.button(\"Sign out\"))\n            ),\n            clerk.signed_out(\n                clerk.sign_in_button(rx.button(\"Sign in\"))\n            ),\n        ),\n        publishable_key=os.environ[\"CLERK_PUBLISHABLE_KEY\"],\n        secret_key=os.environ[\"CLERK_SECRET_KEY\"],\n        register_user_state=True,\n    )\n\napp = rx.App()\napp.add_page(index)\n</code></pre> <p>While Clerk is loading (checking user authentication), the spinner will be displayed. Then either the sign-in or sign-out button will be displayed based on the user's authentication status.</p> <p>The <code>publishable_key</code> and <code>secret_key</code> can be obtained from your Clerk dashboard (Configure/API keys). Read more here</p> <p>Note</p> <p>The <code>register_user_state</code> parameter is optional. Setting this to <code>True</code> enables the <code>clerk.ClerkUser</code> state which can be used to access or display basic user information.</p> <p>alternatively</p> <p>Wrap the entire app (all pages) via:</p> <pre><code>clerk.wrap_app(app, publishable_key=...)\n</code></pre> <p>Taking the same arguments as <code>clerk.clerk_provider</code>.</p>"},{"location":"getting_started/#environment-variables","title":"Environment Variables","text":"<p>A good way to provide the keys is via environment variables (to avoid accidentally sharing them). You can do this by creating a <code>.env</code> file in the root of your project with:</p> <pre><code>CLERK_PUBLISHABLE_KEY=your_publishable_key\nCLERK_SECRET_KEY=your_secret_key\n</code></pre> <p>Then you can use the <code>python-dotenv</code> package to load the variables:</p> <pre><code>pip install python-dotenv\n</code></pre> <pre><code>from dotenv import load_dotenv\nload_dotenv()\n</code></pre> <p>This will load the environment variables from the <code>.env</code> file into the <code>os.environ</code> dictionary.</p> <p>Warning</p> <p>Make sure to add the <code>.env</code> file to your <code>.gitignore</code> file to avoid accidentally sharing your keys.</p>"},{"location":"getting_started/#adding-sign-in-and-sign-up-pages","title":"Adding Sign-In and Sign-Up Pages","text":"<p>You can additionally add some pages for signing in and signing up. By default they will be available at <code>/sign-in</code> and <code>/sign-up</code> respectively.</p> <pre><code>app = rx.App()\napp.add_page(index)\nclerk.add_sign_in_page(app)\nclerk.add_sign_up_page(app)\n</code></pre>"},{"location":"getting_started/#next-steps","title":"Next Steps","text":"<ul> <li>Explore more features of the Reflex Clerk API in the Features section.</li> <li>Visit the Demo to see the Reflex Clerk API in action.</li> <li>Check out the Migration Guide if you're migrating from the <code>Kroo/reflex-clerk</code> package.</li> </ul>"},{"location":"migrating/","title":"Migration Guide","text":"<p>This guide provides information on migrating from the <code>Kroo/reflex-clerk</code> package to the <code>reflex-clerk-api</code>. It's mostly a direct drop-in replacement, but there are a few small changes to be aware of. Also some improvements that fill some gaps in the previous package.</p>"},{"location":"migrating/#key-changes","title":"Key Changes","text":"<ol> <li> <p>Import Path Update:    Update your imports to use <code>reflex_clerk_api</code> instead of <code>reflex_clerk</code>.</p> </li> <li> <p>Page Installation:    Use <code>clerk.add_sign_in_page(app)</code> and <code>clerk.add_sign_up_page(app)</code> instead of <code>clerk.install_pages(app)</code>.</p> </li> <li> <p>User Information Retrieval:    For full user info, use <code>await clerk.get_user()</code> inside event handlers instead of <code>clerk_state.user</code>. This makes the user data retrieval occur explicitly when needed. You can choose to cache the information however you like.</p> </li> <li> <p>ClerkUser:    If you just want basic user information, you can enable the <code>ClerkUser</code> state by setting <code>register_user_state=True</code> when calling <code>clerk.clerk_provider(...)</code>.</p> </li> <li> <p>On load Event Handling:    Wrap <code>on_load</code> events that depend on the user authentication state with <code>clerk.on_load(&lt;on_load_events&gt;)</code> to ensure the <code>ClerkState</code> is updated before other <code>on_load</code> events. This ensures that <code>is_signed_in</code> will be accurate. (This was not handled with the previous package).</p> </li> <li> <p>On Auth Change Handlers:    Use <code>clerk.register_on_auth_change_handler(&lt;handler&gt;)</code> to register event handlers that are called on authentication changes (login/logout). (This was not handled with the previous package).</p> </li> <li> <p>Backend API:    Note that you can also import and directly use the <code>clerk_backend_api</code> if desired, as it is a dependency of this plugin. The <code>client</code> used by the <code>ClerkState</code> is available as a property <code>clerk_state.client</code>.</p> </li> </ol> <p>Note</p> <p>The lower case <code>clerk_state</code> implies using <code>clerk_state = await self.get_state(clerk.ClerkState)</code> within an event handler method.</p>"},{"location":"full_docs/authentication_components/","title":"Authentication components","text":""},{"location":"full_docs/clerk_provider/","title":"Clerk provider","text":""},{"location":"full_docs/clerk_provider/#reflex_clerk_api.clerk_provider.ClerkState","title":"<code>ClerkState</code>","text":"<p>               Bases: <code>State</code></p> Source code in <code>custom_components/reflex_clerk_api/clerk_provider.py</code> <pre><code>class ClerkState(rx.State):\n    is_signed_in: bool = False\n    \"\"\"Whether the user is logged in.\"\"\"\n\n    auth_checked: bool = False\n    \"\"\"Whether the auth state of the user has been checked yet.\n    I.e., has Clerk sent a response to the frontend yet.\"\"\"\n\n    claims: JWTClaims | None = None\n    \"\"\"The JWT claims of the user, if they are logged in.\"\"\"\n    user_id: str | None = None\n    \"\"\"The clerk user ID of the user, if they are logged in.\"\"\"\n\n    # NOTE: ClassVar tells reflex it doesn't need to include these in the persisted state per instance.\n    _auth_wait_timeout_seconds: ClassVar[float] = 1.0\n    _secret_key: ClassVar[str | None] = None\n    \"\"\"The Clerk secret_key set during clerk_provider creation.\"\"\"\n    _on_load_events: ClassVar[dict[uuid.UUID, EventType[()]]] = {}\n    _dependent_handlers: ClassVar[dict[int, EventCallback]] = {}\n    _client: ClassVar[clerk_backend_api.Clerk | None] = None\n    _jwk_keys: ClassVar[dict[str, Any] | None] = None\n    \"JWK keys from Clerk for decoding any users JWT tokens (only required once per instance).\"\n    _last_jwk_reset: ClassVar[float] = 0.0\n    _claims_options: ClassVar[dict[str, Any]] = {\n        # \"iss\": {\"value\": \"https://&lt;your-iss&gt;.clerk.accounts.dev\"},\n        \"exp\": {\"essential\": True},\n        \"nbf\": {\"essential\": True},\n        # \"azp\": {\"essential\": False, \"values\": [\"http://localhost:3000\", \"https://example.com\"]},\n    }\n\n    @classmethod\n    def register_dependent_handler(cls, handler: EventCallback) -&gt; None:\n        \"\"\"Register a handler to be called any time this state updates.\n\n        I.e. Any events that should be triggered on login/logout.\n        \"\"\"\n        assert isinstance(handler, rx.EventHandler)\n        hash_id = hash((handler.state_full_name, handler.fn))\n        logging.debug(f\"Dependent hash_id: {hash_id}\")\n        cls._dependent_handlers[hash_id] = handler\n\n    @classmethod\n    def set_auth_wait_timeout_seconds(cls, seconds: float) -&gt; None:\n        \"\"\"Sets the max time to wait for initial auth check before running other on_load events.\n\n        Note: on_load events will still be run after a timed out auth check.\n        Check ClerkState.auth_checked to see if auth check is complete.\n        \"\"\"\n        cls._auth_wait_timeout_seconds = seconds\n\n    @classmethod\n    def set_claims_options(cls, claims_options: dict[str, Any]) -&gt; None:\n        \"\"\"Set the claims options for the JWT claims validation.\"\"\"\n        cls._claims_options = claims_options\n\n    @property\n    def client(self) -&gt; clerk_backend_api.Clerk:\n        if self._client is None:\n            self._set_client()\n        assert self._client is not None\n        return self._client\n\n    @rx.event(background=True)\n    async def set_clerk_session(self, token: str) -&gt; EventType:\n        \"\"\"Manually obtain user session information via the Clerk JWT.\n\n        This event is triggered by the frontend via the ClerkSessionSynchronizer/ClerkProvider component.\n\n        Note: Only the parts that modify the per-instance state need to be in an `async with self` block.\n        \"\"\"\n        logging.debug(\"Setting Clerk session\")\n        jwks = await self._get_jwk_keys()\n        try:\n            decoded: JWTClaims = jwt.decode(\n                token, {\"keys\": jwks}, claims_options=self._claims_options\n            )\n        except jose_errors.DecodeError as e:\n            # E.g. DecodeError -- Something went wrong just getting the JWT\n            # On next attempt, new JWKs will be fetched\n            async with self:\n                self.auth_error = e\n            self._request_jwk_reset()\n            logging.warning(f\"JWT decode error: {e}\")\n            return ClerkState.clear_clerk_session\n        try:\n            # Validate the token according to the claim options (e.g. iss, exp, nbf, azp.)\n            decoded.validate()\n        except (jose_errors.InvalidClaimError, jose_errors.MissingClaimError) as e:\n            logging.warning(f\"JWT token is invalid: {e}\")\n            return ClerkState.clear_clerk_session\n\n        async with self:\n            self.is_signed_in = True\n            self.claims = decoded\n            self.user_id = str(decoded.get(\"sub\"))\n            self.auth_checked = True\n        return list(self._dependent_handlers.values())\n\n    @rx.event\n    def clear_clerk_session(self) -&gt; EventType:\n        \"\"\"Clear the Clerk session information.\n\n        This event is triggered by the frontend via the ClerkSessionSynchronizer/ClerkProvider component.\n        \"\"\"\n        logging.debug(\"Clearing Clerk session\")\n        self.reset()\n        self.auth_checked = True\n        return list(self._dependent_handlers.values())\n\n    @rx.event(background=True)\n    async def wait_for_auth_check(self, uid: uuid.UUID | str) -&gt; EventType:\n        \"\"\"Wait for the Clerk authentication to complete (event sent from frontend).\n\n        Can't just use a blocking wait_for_auth_check because we are really waiting for the frontend event trigger to run, so we need to not block that while we wait.\n\n        This can then return on_load events once auth_checked is True.\n        \"\"\"\n        uid = uuid.UUID(uid) if isinstance(uid, str) else uid\n        logging.debug(f\"Waiting for auth check: {uid} ({type(uid)})\")\n\n        on_loads = self._on_load_events.get(uid, None)\n        if on_loads is None:\n            logging.warning(\"Waited for auth, but no on_load events registered.\")\n            on_loads = []\n\n        start_time = time.time()\n        while time.time() - start_time &lt; self._auth_wait_timeout_seconds:\n            if self.auth_checked:\n                logging.debug(\"Auth check complete\")\n                return on_loads\n            logging.debug(\"...waiting for auth...\")\n            # TODO: Ideally, wait on some event instead of sleeping\n            await asyncio.sleep(0.05)\n        logging.warning(\"Auth check timed out\")\n        return on_loads\n\n    @classmethod\n    def _set_secret_key(cls, secret_key: str) -&gt; None:\n        if not secret_key:\n            raise MissingSecretKeyError(\"secret_key must be set (and not empty)\")\n        cls._secret_key = secret_key\n\n    @classmethod\n    def _set_on_load_events(cls, uid: uuid.UUID, on_load_events: EventType[()]) -&gt; None:\n        logging.debug(f\"Registing on_load events: {uid}\")\n        cls._on_load_events[uid] = on_load_events\n\n    @classmethod\n    def _set_client(cls) -&gt; None:\n        if cls._secret_key:\n            secret_key = cls._secret_key\n        else:\n            if \"CLERK_SECRET_KEY\" not in os.environ:\n                raise MissingSecretKeyError(\n                    \"CLERK_SECRET_KEY either needs to be passed into clerk_provider(...) or set as an environment variable.\"\n                )\n            secret_key = os.environ[\"CLERK_SECRET_KEY\"]\n        client = clerk_backend_api.Clerk(bearer_auth=secret_key)\n        cls._client = client\n\n    @classmethod\n    def _set_jwk_keys(cls, keys: dict[str, Any] | None) -&gt; None:\n        cls._jwk_keys = keys\n\n    @classmethod\n    def _request_jwk_reset(cls) -&gt; None:\n        \"\"\"Reset the JWK keys so they will be re-fetched on next attempt.\n\n        Only do so if it has been a while since last reset (to prevent malicious tokens from forcing\n        constant re-fetching).\n        \"\"\"\n        now = time.time()\n        if now - cls._last_jwk_reset &lt; 10:\n            logging.warning(\"JWK reset requested too soon\")\n            return\n        cls._last_jwk_reset = time.time()\n        cls._jwk_keys = None\n\n    async def _get_jwk_keys(self) -&gt; dict[str, Any]:\n        \"\"\"Get the JWK keys from the Clerk API.\n\n        Note: Cannot be a property because it requires async call to populate.\n        Only needs to be done once (will be refreshed on errors).\n        \"\"\"\n        if self._jwk_keys:\n            return self._jwk_keys\n        jwks = await self.client.jwks.get_jwks_async()\n        assert jwks is not None\n        assert jwks.keys is not None\n        keys = jwks.model_dump()[\"keys\"]\n        self._set_jwk_keys(keys)\n        return keys\n</code></pre>"},{"location":"full_docs/clerk_provider/#reflex_clerk_api.clerk_provider.ClerkState.is_signed_in","title":"<code>is_signed_in = False</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Whether the user is logged in.</p>"},{"location":"full_docs/clerk_provider/#reflex_clerk_api.clerk_provider.ClerkState.auth_checked","title":"<code>auth_checked = False</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Whether the auth state of the user has been checked yet. I.e., has Clerk sent a response to the frontend yet.</p>"},{"location":"full_docs/clerk_provider/#reflex_clerk_api.clerk_provider.ClerkState.claims","title":"<code>claims = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The JWT claims of the user, if they are logged in.</p>"},{"location":"full_docs/clerk_provider/#reflex_clerk_api.clerk_provider.ClerkState.user_id","title":"<code>user_id = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The clerk user ID of the user, if they are logged in.</p>"},{"location":"full_docs/clerk_provider/#reflex_clerk_api.clerk_provider.ClerkState.register_dependent_handler","title":"<code>register_dependent_handler(handler)</code>  <code>classmethod</code>","text":"<p>Register a handler to be called any time this state updates.</p> <p>I.e. Any events that should be triggered on login/logout.</p> Source code in <code>custom_components/reflex_clerk_api/clerk_provider.py</code> <pre><code>@classmethod\ndef register_dependent_handler(cls, handler: EventCallback) -&gt; None:\n    \"\"\"Register a handler to be called any time this state updates.\n\n    I.e. Any events that should be triggered on login/logout.\n    \"\"\"\n    assert isinstance(handler, rx.EventHandler)\n    hash_id = hash((handler.state_full_name, handler.fn))\n    logging.debug(f\"Dependent hash_id: {hash_id}\")\n    cls._dependent_handlers[hash_id] = handler\n</code></pre>"},{"location":"full_docs/clerk_provider/#reflex_clerk_api.clerk_provider.ClerkState.set_auth_wait_timeout_seconds","title":"<code>set_auth_wait_timeout_seconds(seconds)</code>  <code>classmethod</code>","text":"<p>Sets the max time to wait for initial auth check before running other on_load events.</p> <p>Note: on_load events will still be run after a timed out auth check. Check ClerkState.auth_checked to see if auth check is complete.</p> Source code in <code>custom_components/reflex_clerk_api/clerk_provider.py</code> <pre><code>@classmethod\ndef set_auth_wait_timeout_seconds(cls, seconds: float) -&gt; None:\n    \"\"\"Sets the max time to wait for initial auth check before running other on_load events.\n\n    Note: on_load events will still be run after a timed out auth check.\n    Check ClerkState.auth_checked to see if auth check is complete.\n    \"\"\"\n    cls._auth_wait_timeout_seconds = seconds\n</code></pre>"},{"location":"full_docs/clerk_provider/#reflex_clerk_api.clerk_provider.ClerkState.set_claims_options","title":"<code>set_claims_options(claims_options)</code>  <code>classmethod</code>","text":"<p>Set the claims options for the JWT claims validation.</p> Source code in <code>custom_components/reflex_clerk_api/clerk_provider.py</code> <pre><code>@classmethod\ndef set_claims_options(cls, claims_options: dict[str, Any]) -&gt; None:\n    \"\"\"Set the claims options for the JWT claims validation.\"\"\"\n    cls._claims_options = claims_options\n</code></pre>"},{"location":"full_docs/clerk_provider/#reflex_clerk_api.clerk_provider.ClerkState.set_clerk_session","title":"<code>set_clerk_session(token)</code>  <code>async</code>","text":"<p>Manually obtain user session information via the Clerk JWT.</p> <p>This event is triggered by the frontend via the ClerkSessionSynchronizer/ClerkProvider component.</p> <p>Note: Only the parts that modify the per-instance state need to be in an <code>async with self</code> block.</p> Source code in <code>custom_components/reflex_clerk_api/clerk_provider.py</code> <pre><code>@rx.event(background=True)\nasync def set_clerk_session(self, token: str) -&gt; EventType:\n    \"\"\"Manually obtain user session information via the Clerk JWT.\n\n    This event is triggered by the frontend via the ClerkSessionSynchronizer/ClerkProvider component.\n\n    Note: Only the parts that modify the per-instance state need to be in an `async with self` block.\n    \"\"\"\n    logging.debug(\"Setting Clerk session\")\n    jwks = await self._get_jwk_keys()\n    try:\n        decoded: JWTClaims = jwt.decode(\n            token, {\"keys\": jwks}, claims_options=self._claims_options\n        )\n    except jose_errors.DecodeError as e:\n        # E.g. DecodeError -- Something went wrong just getting the JWT\n        # On next attempt, new JWKs will be fetched\n        async with self:\n            self.auth_error = e\n        self._request_jwk_reset()\n        logging.warning(f\"JWT decode error: {e}\")\n        return ClerkState.clear_clerk_session\n    try:\n        # Validate the token according to the claim options (e.g. iss, exp, nbf, azp.)\n        decoded.validate()\n    except (jose_errors.InvalidClaimError, jose_errors.MissingClaimError) as e:\n        logging.warning(f\"JWT token is invalid: {e}\")\n        return ClerkState.clear_clerk_session\n\n    async with self:\n        self.is_signed_in = True\n        self.claims = decoded\n        self.user_id = str(decoded.get(\"sub\"))\n        self.auth_checked = True\n    return list(self._dependent_handlers.values())\n</code></pre>"},{"location":"full_docs/clerk_provider/#reflex_clerk_api.clerk_provider.ClerkState.clear_clerk_session","title":"<code>clear_clerk_session()</code>","text":"<p>Clear the Clerk session information.</p> <p>This event is triggered by the frontend via the ClerkSessionSynchronizer/ClerkProvider component.</p> Source code in <code>custom_components/reflex_clerk_api/clerk_provider.py</code> <pre><code>@rx.event\ndef clear_clerk_session(self) -&gt; EventType:\n    \"\"\"Clear the Clerk session information.\n\n    This event is triggered by the frontend via the ClerkSessionSynchronizer/ClerkProvider component.\n    \"\"\"\n    logging.debug(\"Clearing Clerk session\")\n    self.reset()\n    self.auth_checked = True\n    return list(self._dependent_handlers.values())\n</code></pre>"},{"location":"full_docs/clerk_provider/#reflex_clerk_api.clerk_provider.ClerkState.wait_for_auth_check","title":"<code>wait_for_auth_check(uid)</code>  <code>async</code>","text":"<p>Wait for the Clerk authentication to complete (event sent from frontend).</p> <p>Can't just use a blocking wait_for_auth_check because we are really waiting for the frontend event trigger to run, so we need to not block that while we wait.</p> <p>This can then return on_load events once auth_checked is True.</p> Source code in <code>custom_components/reflex_clerk_api/clerk_provider.py</code> <pre><code>@rx.event(background=True)\nasync def wait_for_auth_check(self, uid: uuid.UUID | str) -&gt; EventType:\n    \"\"\"Wait for the Clerk authentication to complete (event sent from frontend).\n\n    Can't just use a blocking wait_for_auth_check because we are really waiting for the frontend event trigger to run, so we need to not block that while we wait.\n\n    This can then return on_load events once auth_checked is True.\n    \"\"\"\n    uid = uuid.UUID(uid) if isinstance(uid, str) else uid\n    logging.debug(f\"Waiting for auth check: {uid} ({type(uid)})\")\n\n    on_loads = self._on_load_events.get(uid, None)\n    if on_loads is None:\n        logging.warning(\"Waited for auth, but no on_load events registered.\")\n        on_loads = []\n\n    start_time = time.time()\n    while time.time() - start_time &lt; self._auth_wait_timeout_seconds:\n        if self.auth_checked:\n            logging.debug(\"Auth check complete\")\n            return on_loads\n        logging.debug(\"...waiting for auth...\")\n        # TODO: Ideally, wait on some event instead of sleeping\n        await asyncio.sleep(0.05)\n    logging.warning(\"Auth check timed out\")\n    return on_loads\n</code></pre>"},{"location":"full_docs/clerk_provider/#reflex_clerk_api.clerk_provider.ClerkUser","title":"<code>ClerkUser</code>","text":"<p>               Bases: <code>State</code></p> <p>Convenience class for using Clerk User information.</p> <p>This only contains a subset of the information available. Create your own state if you need more.</p> <p>Note: For this to be updated on login/logout events, it must be registered on the ClerkState.</p> Source code in <code>custom_components/reflex_clerk_api/clerk_provider.py</code> <pre><code>class ClerkUser(rx.State):\n    \"\"\"Convenience class for using Clerk User information.\n\n    This only contains a subset of the information available. Create your own state if you need more.\n\n    Note: For this to be updated on login/logout events, it must be registered on the ClerkState.\n    \"\"\"\n\n    first_name: str = \"\"\n    last_name: str = \"\"\n    username: str = \"\"\n    email_address: str = \"\"\n    has_image: bool = False\n    image_url: str = \"\"\n\n    # Set to True when the state is registered on the ClerkState to avoid registering it multiple times.\n    _is_registered: ClassVar[bool] = False\n\n    @rx.event\n    async def load_user(self) -&gt; None:\n        try:\n            user: clerk_backend_api.models.User = await get_user(self)\n        except MissingUserError:\n            logging.debug(\"Clearing user state\")\n            self.reset()\n            return\n\n        logging.debug(\"Updating user state\")\n        self.first_name = (\n            user.first_name\n            if user.first_name and user.first_name != clerk_backend_api.UNSET\n            else \"\"\n        )\n        self.last_name = (\n            user.last_name\n            if user.last_name and user.last_name != clerk_backend_api.UNSET\n            else \"\"\n        )\n        self.username = (\n            user.username\n            if user.username and user.username != clerk_backend_api.UNSET\n            else \"\"\n        )\n        self.email_address = (\n            user.email_addresses[0].email_address if user.email_addresses else \"\"\n        )\n        self.has_image = True if user.has_image is True else False\n        self.image_url = user.image_url or \"\"\n</code></pre>"},{"location":"full_docs/clerk_provider/#reflex_clerk_api.clerk_provider.ClerkSessionSynchronizer","title":"<code>ClerkSessionSynchronizer</code>","text":"<p>               Bases: <code>Component</code></p> <p>ClerkSessionSynchronizer component.</p> <p>This is slightly adapted from Elliot Kroo's reflex-clerk.</p> Source code in <code>custom_components/reflex_clerk_api/clerk_provider.py</code> <pre><code>class ClerkSessionSynchronizer(rx.Component):\n    \"\"\"ClerkSessionSynchronizer component.\n\n    This is slightly adapted from Elliot Kroo's reflex-clerk.\n    \"\"\"\n\n    tag = \"ClerkSessionSynchronizer\"\n\n    def add_imports(\n        self,\n    ) -&gt; rx.ImportDict:\n        addl_imports: rx.ImportDict = {\n            \"@clerk/clerk-react\": [\"useAuth\"],\n            \"react\": [\"useContext\", \"useEffect\"],\n            \"/utils/context\": [\"EventLoopContext\"],\n            \"/utils/state\": [\"Event\"],\n        }\n        return addl_imports\n\n    def add_custom_code(self) -&gt; list[str]:\n        clerk_state_name = ClerkState.get_full_name()\n\n        return [\n            \"\"\"\nfunction ClerkSessionSynchronizer({ children }) {\n  const { getToken, isLoaded, isSignedIn } = useAuth()\n  const [ addEvents, connectErrors ] = useContext(EventLoopContext)\n\n  useEffect(() =&gt; {\n      if (isLoaded &amp;&amp; !!addEvents) {\n        if (isSignedIn) {\n          getToken().then(token =&gt; {\n            addEvents([Event(\"%s.set_clerk_session\", {token})])\n          })\n        } else {\n          addEvents([Event(\"%s.clear_clerk_session\")])\n        }\n      }\n  }, [isSignedIn])\n\n  return (\n      &lt;&gt;{children}&lt;/&gt;\n  )\n}\n\"\"\"\n            % (clerk_state_name, clerk_state_name)\n        ]\n</code></pre>"},{"location":"full_docs/clerk_provider/#reflex_clerk_api.clerk_provider.ClerkProvider","title":"<code>ClerkProvider</code>","text":"<p>               Bases: <code>ClerkBase</code></p> <p>ClerkProvider component.</p> Source code in <code>custom_components/reflex_clerk_api/clerk_provider.py</code> <pre><code>class ClerkProvider(ClerkBase):\n    \"\"\"ClerkProvider component.\"\"\"\n\n    # The React component tag.\n    tag = \"ClerkProvider\"\n\n    # NOTE: This might be relevant to getting apperance.base_theme to work.\n    # lib_dependencies: list[str] = [\"@clerk/themes\"]\n    # def add_imports(self) -&gt; rx.ImportDict:\n    #     return {\n    #         \"@clerk/themes\": [\"dark\", \"neobrutalism\", \"shadesOfPurple\"],\n    #     }\n\n    # The props of the React component.\n    # Note: when Reflex compiles the component to Javascript,\n    # `snake_case` property names are automatically formatted as `camelCase`.\n    # The prop names may be defined in `camelCase` as well.\n    # some_prop: rx.Var[str] = \"some default value\"\n    # some_other_prop: rx.Var[int] = 1\n\n    # Event triggers declaration if any.\n    # Below is equivalent to merging `{ \"on_change\": lambda e: [e] }`\n    # onto the default event triggers of parent/base Component.\n    # The function defined for the `on_change` trigger maps event for the javascript\n    # trigger to what will be passed to the backend event handler function.\n    # on_change: rx.EventHandler[lambda e: [e]]\n\n    after_multi_session_single_sign_out_url: str = \"\"\n    \"\"\"The URL to navigate to after a successful sign-out from multiple sessions.\"\"\"\n\n    after_sign_out_url: str = \"\"\n    \"\"\"The full URL or path to navigate to after a successful sign-out.\"\"\"\n\n    allowed_redirect_origins: list[str | str] = []\n    \"\"\"An optional list of domains to validate user-provided redirect URLs against.\"\"\"\n\n    allowed_redirect_protocols: list[str] = []\n    \"\"\"An optional list of protocols to validate user-provided redirect URLs against.\"\"\"\n\n    # NOTE: `apperance.base_theme` does not work yet.\n    appearance: Appearance | None = None\n    \"\"\"Optional object to style your components. Will only affect Clerk components.\"\"\"\n\n    clerk_js_url: str = \"\"\n    \"\"\"Define the URL that @clerk/clerk-js should be hot-loaded from.\"\"\"\n\n    clerk_js_variant: str | None = None\n    \"\"\"If your web application only uses control components, set this to 'headless'.\"\"\"\n\n    clerk_js_version: str = \"\"\n    \"\"\"Define the npm version for @clerk/clerk-js.\"\"\"\n\n    # domain: str | JSCallable[[str], bool] = \"\"\n    domain: str = \"\"\n    \"\"\"Required if your application is a satellite application. Sets the domain.\"\"\"\n\n    dynamic: bool = False\n    \"\"\"(For Next.js only) Indicates whether Clerk should make dynamic auth data available.\"\"\"\n\n    # initial_state: InitialState | None = None\n    # \"\"\"Provide an initial state of the Clerk client during server-side rendering.\"\"\"\n\n    # is_satellite: bool | JSCallable[[str], bool] = False\n    is_satellite: bool = False\n    \"\"\"Whether the application is a satellite application.\"\"\"\n\n    # Not implemented\n    # localization: Localization | None = None\n    # See https://clerk.com/docs/customization/localization#clerk-localizations for more info.\n    # \"\"\"Optional object to localize your components. Will only affect Clerk components.\"\"\"\n\n    nonce: str = \"\"\n    \"\"\"Nonce value passed to the @clerk/clerk-js script tag for CSP implementation.\"\"\"\n\n    publishable_key: str = \"\"\n    \"\"\"The Clerk Publishable Key for your instance, found on the API keys page in the Clerk Dashboard.\"\"\"\n\n    # proxy_url: str | JSCallable[[str], str] = \"\"\n    proxy_url: str = \"\"\n    \"\"\"The URL of the proxy server to use for Clerk API requests.\"\"\"\n\n    router_push: JSCallable[[str], None | Any] | None = None\n    \"\"\"A function to push a new route into the history stack for navigation.\"\"\"\n\n    router_replace: JSCallable[[str], None | Any] | None = None\n    \"\"\"A function to replace the current route in the history stack for navigation.\"\"\"\n\n    # sdk_metadata: dict[str, str] = {\"name\": \"\", \"version\": \"\", \"environment\": \"\"}\n    # \"\"\"Contains information about the SDK that the host application is using.\"\"\"\n\n    # select_initial_session: Callable[[Any], None | Any] | None = None\n    # \"\"\"Function to override the default behavior of using the last active session during client initialization.\"\"\"\n\n    sign_in_fallback_redirect_url: str = \"/\"\n    \"\"\"The fallback URL to redirect to after the user signs in if there's no redirect_url in the path.\"\"\"\n\n    sign_up_fallback_redirect_url: str = \"/\"\n    \"\"\"The fallback URL to redirect to after the user signs up if there's no redirect_url in the path.\"\"\"\n\n    sign_in_force_redirect_url: str = \"\"\n    \"\"\"URL to always redirect to after the user signs in.\"\"\"\n\n    sign_up_force_redirect_url: str = \"\"\n    \"\"\"URL to always redirect to after the user signs up.\"\"\"\n\n    sign_in_url: str = \"\"\n    \"\"\"URL used for any redirects that might happen, pointing to your primary application on the client-side.\"\"\"\n\n    sign_up_url: str = \"\"\n    \"\"\"URL used for any redirects that might happen, pointing to your primary application on the client-side.\"\"\"\n\n    standard_browser: bool = True\n    \"\"\"Indicates whether ClerkJS assumes cookies can be set (browser setup).\"\"\"\n\n    support_email: str = \"\"\n    \"\"\"Optional support email for display in authentication screens.\"\"\"\n\n    sync_host: str = \"\"\n    \"\"\"URL of the web application that the Chrome Extension will sync the authentication state from.\"\"\"\n\n    telemetry: bool | dict[str, bool] | None = None\n    \"\"\"Controls whether Clerk will collect telemetry data.\"\"\"\n\n    touch_session: bool = True\n    \"\"\"Indicates whether the Clerk Frontend API touch endpoint is called during page focus to keep the last active session alive.\"\"\"\n\n    waitlist_url: str = \"\"\n    \"\"\"The full URL or path to the waitlist page.\"\"\"\n\n    @classmethod\n    def create(cls, *children, **props) -&gt; \"ClerkProvider\":\n        return super().create(*children, **props)\n\n    def add_custom_code(self) -&gt; list[str]:\n        return []\n</code></pre>"},{"location":"full_docs/clerk_provider/#reflex_clerk_api.clerk_provider.ClerkProvider.after_multi_session_single_sign_out_url","title":"<code>after_multi_session_single_sign_out_url = ''</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The URL to navigate to after a successful sign-out from multiple sessions.</p>"},{"location":"full_docs/clerk_provider/#reflex_clerk_api.clerk_provider.ClerkProvider.after_sign_out_url","title":"<code>after_sign_out_url = ''</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The full URL or path to navigate to after a successful sign-out.</p>"},{"location":"full_docs/clerk_provider/#reflex_clerk_api.clerk_provider.ClerkProvider.allowed_redirect_origins","title":"<code>allowed_redirect_origins = []</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>An optional list of domains to validate user-provided redirect URLs against.</p>"},{"location":"full_docs/clerk_provider/#reflex_clerk_api.clerk_provider.ClerkProvider.allowed_redirect_protocols","title":"<code>allowed_redirect_protocols = []</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>An optional list of protocols to validate user-provided redirect URLs against.</p>"},{"location":"full_docs/clerk_provider/#reflex_clerk_api.clerk_provider.ClerkProvider.appearance","title":"<code>appearance = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Optional object to style your components. Will only affect Clerk components.</p>"},{"location":"full_docs/clerk_provider/#reflex_clerk_api.clerk_provider.ClerkProvider.clerk_js_url","title":"<code>clerk_js_url = ''</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Define the URL that @clerk/clerk-js should be hot-loaded from.</p>"},{"location":"full_docs/clerk_provider/#reflex_clerk_api.clerk_provider.ClerkProvider.clerk_js_variant","title":"<code>clerk_js_variant = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>If your web application only uses control components, set this to 'headless'.</p>"},{"location":"full_docs/clerk_provider/#reflex_clerk_api.clerk_provider.ClerkProvider.clerk_js_version","title":"<code>clerk_js_version = ''</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Define the npm version for @clerk/clerk-js.</p>"},{"location":"full_docs/clerk_provider/#reflex_clerk_api.clerk_provider.ClerkProvider.domain","title":"<code>domain = ''</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Required if your application is a satellite application. Sets the domain.</p>"},{"location":"full_docs/clerk_provider/#reflex_clerk_api.clerk_provider.ClerkProvider.dynamic","title":"<code>dynamic = False</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>(For Next.js only) Indicates whether Clerk should make dynamic auth data available.</p>"},{"location":"full_docs/clerk_provider/#reflex_clerk_api.clerk_provider.ClerkProvider.is_satellite","title":"<code>is_satellite = False</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Whether the application is a satellite application.</p>"},{"location":"full_docs/clerk_provider/#reflex_clerk_api.clerk_provider.ClerkProvider.nonce","title":"<code>nonce = ''</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Nonce value passed to the @clerk/clerk-js script tag for CSP implementation.</p>"},{"location":"full_docs/clerk_provider/#reflex_clerk_api.clerk_provider.ClerkProvider.publishable_key","title":"<code>publishable_key = ''</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The Clerk Publishable Key for your instance, found on the API keys page in the Clerk Dashboard.</p>"},{"location":"full_docs/clerk_provider/#reflex_clerk_api.clerk_provider.ClerkProvider.proxy_url","title":"<code>proxy_url = ''</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The URL of the proxy server to use for Clerk API requests.</p>"},{"location":"full_docs/clerk_provider/#reflex_clerk_api.clerk_provider.ClerkProvider.router_push","title":"<code>router_push = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>A function to push a new route into the history stack for navigation.</p>"},{"location":"full_docs/clerk_provider/#reflex_clerk_api.clerk_provider.ClerkProvider.router_replace","title":"<code>router_replace = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>A function to replace the current route in the history stack for navigation.</p>"},{"location":"full_docs/clerk_provider/#reflex_clerk_api.clerk_provider.ClerkProvider.sign_in_fallback_redirect_url","title":"<code>sign_in_fallback_redirect_url = '/'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The fallback URL to redirect to after the user signs in if there's no redirect_url in the path.</p>"},{"location":"full_docs/clerk_provider/#reflex_clerk_api.clerk_provider.ClerkProvider.sign_up_fallback_redirect_url","title":"<code>sign_up_fallback_redirect_url = '/'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The fallback URL to redirect to after the user signs up if there's no redirect_url in the path.</p>"},{"location":"full_docs/clerk_provider/#reflex_clerk_api.clerk_provider.ClerkProvider.sign_in_force_redirect_url","title":"<code>sign_in_force_redirect_url = ''</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>URL to always redirect to after the user signs in.</p>"},{"location":"full_docs/clerk_provider/#reflex_clerk_api.clerk_provider.ClerkProvider.sign_up_force_redirect_url","title":"<code>sign_up_force_redirect_url = ''</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>URL to always redirect to after the user signs up.</p>"},{"location":"full_docs/clerk_provider/#reflex_clerk_api.clerk_provider.ClerkProvider.sign_in_url","title":"<code>sign_in_url = ''</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>URL used for any redirects that might happen, pointing to your primary application on the client-side.</p>"},{"location":"full_docs/clerk_provider/#reflex_clerk_api.clerk_provider.ClerkProvider.sign_up_url","title":"<code>sign_up_url = ''</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>URL used for any redirects that might happen, pointing to your primary application on the client-side.</p>"},{"location":"full_docs/clerk_provider/#reflex_clerk_api.clerk_provider.ClerkProvider.standard_browser","title":"<code>standard_browser = True</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Indicates whether ClerkJS assumes cookies can be set (browser setup).</p>"},{"location":"full_docs/clerk_provider/#reflex_clerk_api.clerk_provider.ClerkProvider.support_email","title":"<code>support_email = ''</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Optional support email for display in authentication screens.</p>"},{"location":"full_docs/clerk_provider/#reflex_clerk_api.clerk_provider.ClerkProvider.sync_host","title":"<code>sync_host = ''</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>URL of the web application that the Chrome Extension will sync the authentication state from.</p>"},{"location":"full_docs/clerk_provider/#reflex_clerk_api.clerk_provider.ClerkProvider.telemetry","title":"<code>telemetry = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Controls whether Clerk will collect telemetry data.</p>"},{"location":"full_docs/clerk_provider/#reflex_clerk_api.clerk_provider.ClerkProvider.touch_session","title":"<code>touch_session = True</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Indicates whether the Clerk Frontend API touch endpoint is called during page focus to keep the last active session alive.</p>"},{"location":"full_docs/clerk_provider/#reflex_clerk_api.clerk_provider.ClerkProvider.waitlist_url","title":"<code>waitlist_url = ''</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The full URL or path to the waitlist page.</p>"},{"location":"full_docs/clerk_provider/#reflex_clerk_api.clerk_provider.on_load","title":"<code>on_load(on_load_events)</code>","text":"<p>Use this to wrap any on_load events that should happen after Clerk has checked authentication.</p> <p>Parameters:</p> Name Type Description Default <code>on_load_events</code> <code>EventType[] | None</code> <p>The events to run after authentication is checked.</p> required <p>Examples:</p> <p>app.add_page(..., on_load=clerk.on_load()) Source code in <code>custom_components/reflex_clerk_api/clerk_provider.py</code> <pre><code>def on_load(on_load_events: EventType[()] | None) -&gt; list[IndividualEventType[()]]:\n    \"\"\"Use this to wrap any on_load events that should happen after Clerk has checked authentication.\n\n    Args:\n        on_load_events: The events to run after authentication is checked.\n\n    Examples:\n        app.add_page(..., on_load=clerk.on_load(&lt;events&gt;))\n    \"\"\"\n    if on_load_events is None:\n        return []\n    on_load_list = (\n        on_load_events if isinstance(on_load_events, list) else [on_load_events]\n    )\n\n    # Add the on_load events to a registry in the ClerkState instead of actually passing them to on_load.\n    #  Then, the wait_for_auth_check event will return the on_load events once auth_checked is True.\n    #  Can't just use a blocking wait_for_auth_check because we are really waiting for the frontend event trigger to run,\n    #  so we need to not block that while we wait.\n    uid = uuid.uuid4()\n    ClerkState._set_on_load_events(uid, on_load_list)\n    return [ClerkState.wait_for_auth_check(uid)]\n</code></pre>"},{"location":"full_docs/clerk_provider/#reflex_clerk_api.clerk_provider.get_user","title":"<code>get_user(current_state)</code>  <code>async</code>","text":"<p>Get the User object from Clerk given the currently logged in user.</p> <p>Note: Must be used within an event handler in order to get the appropriate clerk_state.</p> <p>Parameters:</p> Name Type Description Default <code>current_state</code> <code>State</code> <p>The <code>self</code> state from the current event handler.</p> required <p>Examples:</p> <pre><code>class State(rx.State):\n    @rx.event\n    async def handle_getting_user_email(self) -&gt; EventType:\n        user = await clerk.get_user(self)\n        return rx.toast.info(f\"User: {user.email}\")\n</code></pre> Source code in <code>custom_components/reflex_clerk_api/clerk_provider.py</code> <pre><code>async def get_user(current_state: rx.State) -&gt; clerk_backend_api.models.User:\n    \"\"\"Get the User object from Clerk given the currently logged in user.\n\n    Note: Must be used within an event handler in order to get the appropriate clerk_state.\n\n    Args:\n        current_state: The `self` state from the current event handler.\n\n    Examples:\n\n    ```python\n    class State(rx.State):\n        @rx.event\n        async def handle_getting_user_email(self) -&gt; EventType:\n            user = await clerk.get_user(self)\n            return rx.toast.info(f\"User: {user.email}\")\n    ```\n    \"\"\"\n    clerk_state = await _get_state_within_handler(current_state, ClerkState)\n    user_id = clerk_state.user_id\n    if user_id is None:\n        raise MissingUserError(\"No user_id to get user for\")\n    user = await clerk_state.client.users.get_async(user_id=user_id)\n    if user is None:\n        raise MissingUserError(\"No user found\")\n    return user\n</code></pre>"},{"location":"full_docs/clerk_provider/#reflex_clerk_api.clerk_provider.register_on_auth_change_handler","title":"<code>register_on_auth_change_handler(handler)</code>","text":"<p>Register a handler to be called any time the user logs in or out.</p> <p>Parameters:</p> Name Type Description Default <code>handler</code> <code>EventCallback</code> <p>The event handler function to be called.</p> required Source code in <code>custom_components/reflex_clerk_api/clerk_provider.py</code> <pre><code>def register_on_auth_change_handler(handler: EventCallback) -&gt; None:\n    \"\"\"Register a handler to be called any time the user logs in or out.\n\n    Args:\n        handler: The event handler function to be called.\n    \"\"\"\n    ClerkState.register_dependent_handler(handler)\n</code></pre>"},{"location":"full_docs/clerk_provider/#reflex_clerk_api.clerk_provider.clerk_provider","title":"<code>clerk_provider(*children, publishable_key, secret_key=None, register_user_state=False, appearance=None, **props)</code>","text":"<p>Create a ClerkProvider component to wrap your app/page that uses clerk authentication.</p> <p>Note: can also use <code>wrap_app</code> to wrap the entire app.</p> <p>Parameters:</p> Name Type Description Default <code>children</code> <p>The children components to wrap.</p> <code>()</code> <code>publishable_key</code> <code>str</code> <p>The Clerk Publishable Key for your instance.</p> required <code>secret_key</code> <code>str | None</code> <p>Your Clerk app's Secret Key, which you can find in the Clerk Dashboard. It will be prefixed with sk_test_ in development instances and sk_live_ in production instances. Do not expose this on the frontend with a public environment variable.</p> <code>None</code> <code>register_user_state</code> <code>bool</code> <p>Whether to register the ClerkUser state to automatically load user information on login.</p> <code>False</code> <code>appearance</code> <code>Appearance | None</code> <p>Optional object to style your components. Will only affect Clerk components.</p> <code>None</code> Source code in <code>custom_components/reflex_clerk_api/clerk_provider.py</code> <pre><code>def clerk_provider(\n    *children,\n    publishable_key: str,\n    secret_key: str | None = None,\n    register_user_state: bool = False,\n    appearance: Appearance | None = None,\n    **props,\n) -&gt; rx.Component:\n    \"\"\"\n    Create a ClerkProvider component to wrap your app/page that uses clerk authentication.\n\n    Note: can also use `wrap_app` to wrap the entire app.\n\n    Args:\n        children: The children components to wrap.\n        publishable_key: The Clerk Publishable Key for your instance.\n        secret_key: Your Clerk app's Secret Key, which you can find in the Clerk Dashboard. It will be prefixed with sk_test_ in development instances and sk_live_ in production instances. Do not expose this on the frontend with a public environment variable.\n        register_user_state: Whether to register the ClerkUser state to automatically load user information on login.\n        appearance: Optional object to style your components. Will only affect Clerk components.\n    \"\"\"\n    if secret_key:\n        ClerkState._set_secret_key(secret_key)\n\n    if register_user_state:\n        register_on_auth_change_handler(ClerkUser.load_user)\n\n    return ClerkProvider.create(\n        ClerkSessionSynchronizer.create(*children),\n        publishable_key=publishable_key,\n        appearance=appearance,\n        **props,\n    )\n</code></pre>"},{"location":"full_docs/clerk_provider/#reflex_clerk_api.clerk_provider.wrap_app","title":"<code>wrap_app(app, publishable_key, secret_key=None, register_user_state=False, appearance=None, **props)</code>","text":"<p>Wraps the entire app with the ClerkProvider.</p> <p>For multi-page apps where all pages require Clerk authentication components (including knowing if the user is not signed in).</p> <p>Parameters:</p> Name Type Description Default <code>app</code> <code>App</code> <p>The Reflex app to wrap.</p> required <code>publishable_key</code> <code>str</code> <p>The Clerk Publishable Key for your instance.</p> required <code>secret_key</code> <code>str | None</code> <p>Your Clerk app's Secret Key. (not needed for frontend only)</p> <code>None</code> <code>register_user_state</code> <code>bool</code> <p>Whether to register the ClerkUser state to automatically load user information on login.</p> <code>False</code> Source code in <code>custom_components/reflex_clerk_api/clerk_provider.py</code> <pre><code>def wrap_app(\n    app: rx.App,\n    publishable_key: str,\n    secret_key: str | None = None,\n    register_user_state: bool = False,\n    appearance: Appearance | None = None,\n    **props,\n) -&gt; rx.App:\n    \"\"\"Wraps the entire app with the ClerkProvider.\n\n    For multi-page apps where all pages require Clerk authentication components (including knowing if the user\n    is **not** signed in).\n\n    Args:\n        app: The Reflex app to wrap.\n        publishable_key: The Clerk Publishable Key for your instance.\n        secret_key: Your Clerk app's Secret Key. (not needed for frontend only)\n        register_user_state: Whether to register the ClerkUser state to automatically load user information on login.\n    \"\"\"\n    # 1 makes this the first wrapper around the content\n    #  (0 would place it after, 100 would also wrap default reflex wrappers)\n    app.app_wraps[(1, \"ClerkProvider\")] = lambda _: clerk_provider(\n        publishable_key=publishable_key,\n        secret_key=secret_key,\n        register_user_state=register_user_state,\n        appearance=appearance,\n        **props,\n    )\n    return app\n</code></pre>"},{"location":"full_docs/control_components/","title":"Control components","text":""},{"location":"full_docs/control_components/#reflex_clerk_api.control_components.ClerkLoaded","title":"<code>ClerkLoaded</code>","text":"<p>               Bases: <code>ClerkBase</code></p> <p>Only renders children after authentication has been checked.</p> Source code in <code>custom_components/reflex_clerk_api/control_components.py</code> <pre><code>class ClerkLoaded(ClerkBase):\n    \"\"\"Only renders children after authentication has been checked.\"\"\"\n\n    tag = \"ClerkLoaded\"\n</code></pre>"},{"location":"full_docs/control_components/#reflex_clerk_api.control_components.ClerkLoading","title":"<code>ClerkLoading</code>","text":"<p>               Bases: <code>ClerkBase</code></p> <p>Only renders childen while Clerk authenticates the user.</p> Source code in <code>custom_components/reflex_clerk_api/control_components.py</code> <pre><code>class ClerkLoading(ClerkBase):\n    \"\"\"Only renders childen while Clerk authenticates the user.\"\"\"\n\n    tag = \"ClerkLoading\"\n</code></pre>"},{"location":"full_docs/control_components/#reflex_clerk_api.control_components.Protect","title":"<code>Protect</code>","text":"<p>               Bases: <code>ClerkBase</code></p> Source code in <code>custom_components/reflex_clerk_api/control_components.py</code> <pre><code>class Protect(ClerkBase):\n    tag = \"Protect\"\n\n    condition: Javascript | None = None\n    \"Optional conditional logic that renders the children if it returns true\"\n    fallback: JSX | None = None\n    \"An optional snippet of JSX to show when a user doesn't have the role or permission to access the protected content.\"\n    permission: str | None = None\n    \"Optional string corresponding to a Role's Permission in the format org:&lt;resource&gt;:&lt;action&gt;\"\n    role: str | None = None\n    \"Optional string corresponding to an Organization's Role in the format org:&lt;role&gt;\"\n</code></pre>"},{"location":"full_docs/control_components/#reflex_clerk_api.control_components.Protect.condition","title":"<code>condition = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Optional conditional logic that renders the children if it returns true</p>"},{"location":"full_docs/control_components/#reflex_clerk_api.control_components.Protect.fallback","title":"<code>fallback = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>An optional snippet of JSX to show when a user doesn't have the role or permission to access the protected content.</p>"},{"location":"full_docs/control_components/#reflex_clerk_api.control_components.Protect.permission","title":"<code>permission = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Optional string corresponding to a Role's Permission in the format org::"},{"location":"full_docs/control_components/#reflex_clerk_api.control_components.Protect.role","title":"<code>role = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Optional string corresponding to an Organization's Role in the format org:"},{"location":"full_docs/control_components/#reflex_clerk_api.control_components.RedirectToSignIn","title":"<code>RedirectToSignIn</code>","text":"<p>               Bases: <code>ClerkBase</code></p> <p>Immediately redirects the user to the sign in page when rendered.</p> Source code in <code>custom_components/reflex_clerk_api/control_components.py</code> <pre><code>class RedirectToSignIn(ClerkBase):\n    \"\"\"Immediately redirects the user to the sign in page when rendered.\"\"\"\n\n    tag = \"RedirectToSignIn\"\n\n    sign_in_fallback_redirect_url: str | None = None\n    \"The fallback URL to redirect to after the user signs in, if there's no redirect_url in the path already. Defaults to /.\"\n    sign_in_force_redirect_url: str | None = None\n    \"If provided, this URL will always be redirected to after the user signs in.\"\n    initial_values: SignInInitialValues | None = None\n    \"The values used to prefill the sign-in fields with.\"\n</code></pre>"},{"location":"full_docs/control_components/#reflex_clerk_api.control_components.RedirectToSignIn.sign_in_fallback_redirect_url","title":"<code>sign_in_fallback_redirect_url = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The fallback URL to redirect to after the user signs in, if there's no redirect_url in the path already. Defaults to /.</p>"},{"location":"full_docs/control_components/#reflex_clerk_api.control_components.RedirectToSignIn.sign_in_force_redirect_url","title":"<code>sign_in_force_redirect_url = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>If provided, this URL will always be redirected to after the user signs in.</p>"},{"location":"full_docs/control_components/#reflex_clerk_api.control_components.RedirectToSignIn.initial_values","title":"<code>initial_values = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The values used to prefill the sign-in fields with.</p>"},{"location":"full_docs/control_components/#reflex_clerk_api.control_components.RedirectToSignUp","title":"<code>RedirectToSignUp</code>","text":"<p>               Bases: <code>ClerkBase</code></p> <p>Immediately redirects the user to the sign up page when rendered.</p> Source code in <code>custom_components/reflex_clerk_api/control_components.py</code> <pre><code>class RedirectToSignUp(ClerkBase):\n    \"\"\"Immediately redirects the user to the sign up page when rendered.\"\"\"\n\n    tag = \"RedirectToSignUp\"\n\n    sign_up_fallback_redirect_url: str | None = None\n    \"The fallback URL to redirect to after the user signs up, if there's no redirect_url in the path already. Defaults to /.\"\n    sign_up_force_redirect_url: str | None = None\n    \"If provided, this URL will always be redirected to after the user signs up.\"\n    initial_values: SignUpInitialValues | None = None\n    \"The values used to prefill the sign-up fields with.\"\n</code></pre>"},{"location":"full_docs/control_components/#reflex_clerk_api.control_components.RedirectToSignUp.sign_up_fallback_redirect_url","title":"<code>sign_up_fallback_redirect_url = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The fallback URL to redirect to after the user signs up, if there's no redirect_url in the path already. Defaults to /.</p>"},{"location":"full_docs/control_components/#reflex_clerk_api.control_components.RedirectToSignUp.sign_up_force_redirect_url","title":"<code>sign_up_force_redirect_url = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>If provided, this URL will always be redirected to after the user signs up.</p>"},{"location":"full_docs/control_components/#reflex_clerk_api.control_components.RedirectToSignUp.initial_values","title":"<code>initial_values = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The values used to prefill the sign-up fields with.</p>"},{"location":"full_docs/control_components/#reflex_clerk_api.control_components.RedirectToUserProfile","title":"<code>RedirectToUserProfile</code>","text":"<p>               Bases: <code>ClerkBase</code></p> <p>Immediately redirects the user to their profile page when rendered.</p> Source code in <code>custom_components/reflex_clerk_api/control_components.py</code> <pre><code>class RedirectToUserProfile(ClerkBase):\n    \"\"\"Immediately redirects the user to their profile page when rendered.\"\"\"\n\n    tag = \"RedirectToUserProfile\"\n</code></pre>"},{"location":"full_docs/control_components/#reflex_clerk_api.control_components.SignedIn","title":"<code>SignedIn</code>","text":"<p>               Bases: <code>ClerkBase</code></p> <p>Only renders children when the user is signed in.</p> Source code in <code>custom_components/reflex_clerk_api/control_components.py</code> <pre><code>class SignedIn(ClerkBase):\n    \"\"\"Only renders children when the user is signed in.\"\"\"\n\n    tag = \"SignedIn\"\n</code></pre>"},{"location":"full_docs/control_components/#reflex_clerk_api.control_components.SignedOut","title":"<code>SignedOut</code>","text":"<p>               Bases: <code>ClerkBase</code></p> <p>Only renders children when the user is signed out.</p> Source code in <code>custom_components/reflex_clerk_api/control_components.py</code> <pre><code>class SignedOut(ClerkBase):\n    \"\"\"Only renders children when the user is signed out.\"\"\"\n\n    tag = \"SignedOut\"\n</code></pre>"},{"location":"full_docs/pages/","title":"Pages","text":"<p>This provides some example code for adding dedicated sign-in and sign-up pages to your app.</p>"},{"location":"full_docs/pages/#reflex_clerk_api.pages.add_sign_in_page","title":"<code>add_sign_in_page(app, publishable_key=None, route='/sign-in')</code>","text":"<p>Adds a sign-in page that is customizable via the Clerk dashboard.</p> Source code in <code>custom_components/reflex_clerk_api/pages.py</code> <pre><code>def add_sign_in_page(\n    app: rx.App, publishable_key: str | None = None, route: str = \"/sign-in\"\n) -&gt; None:\n    \"\"\"\n    Adds a sign-in page that is customizable via the Clerk dashboard.\n    \"\"\"\n    assert route.startswith(\"/\")\n    publishable_key = publishable_key or os.environ[\"CLERK_PUBLISHABLE_KEY\"]\n\n    sign_in_page = clerk.clerk_provider(\n        rx.center(\n            rx.vstack(\n                clerk.sign_in(path=route),\n                align=\"center\",\n                spacing=\"7\",\n            ),\n            height=\"100vh\",\n        ),\n        publishable_key=publishable_key,\n    )\n    app.add_page(sign_in_page, route=route + \"/[[...signin]]\")\n</code></pre>"},{"location":"full_docs/pages/#reflex_clerk_api.pages.add_sign_up_page","title":"<code>add_sign_up_page(app, publishable_key=None, route='/sign-up')</code>","text":"<p>Adds a sign-up page that is customizable via the Clerk dashboard.</p> Source code in <code>custom_components/reflex_clerk_api/pages.py</code> <pre><code>def add_sign_up_page(\n    app: rx.App, publishable_key: str | None = None, route: str = \"/sign-up\"\n) -&gt; None:\n    \"\"\"\n    Adds a sign-up page that is customizable via the Clerk dashboard.\n    \"\"\"\n    assert route.startswith(\"/\")\n    publishable_key = publishable_key or os.environ[\"CLERK_PUBLISHABLE_KEY\"]\n\n    sign_up_page = clerk.clerk_provider(\n        rx.center(\n            rx.vstack(\n                clerk.sign_up(path=route),\n                align=\"center\",\n                spacing=\"7\",\n            ),\n            height=\"100vh\",\n        ),\n        publishable_key=publishable_key,\n    )\n    app.add_page(sign_up_page, route=route + \"/[[...signup]]\")\n</code></pre>"},{"location":"full_docs/unstyled_components/","title":"Unstyled components","text":""},{"location":"full_docs/unstyled_components/#reflex_clerk_api.unstyled_components.SignUpButton","title":"<code>SignUpButton</code>","text":"<p>               Bases: <code>ClerkBase</code></p> Source code in <code>custom_components/reflex_clerk_api/unstyled_components.py</code> <pre><code>class SignUpButton(ClerkBase):\n    tag = \"SignUpButton\"\n\n    force_redirect_url: str | None = None\n    \"If provided, this URL will always be redirected to after the user signs up. It's recommended to use the environment variable instead.\"\n\n    fallback_redirect_url: str | None = None\n    \"The fallback URL to redirect to after the user signs up, if there's no redirect_url in the path already. Defaults to /. It's recommended to use the environment variable instead.\"\n\n    sign_in_force_redirect_url: str | None = None\n    \"If provided, this URL will always be redirected to after the user signs in. It's recommended to use the environment variable instead.\"\n\n    sign_in_fallback_redirect_url: str | None = None\n    \"The fallback URL to redirect to after the user signs in, if there's no redirect_url in the path already. Defaults to /. It's recommended to use the environment variable instead.\"\n\n    mode: str | None = None\n    \"Determines what happens when a user clicks on the &lt;SignUpButton&gt;. Setting this to 'redirect' will redirect the user to the sign-up route. Setting this to 'modal' will open a modal on the current route. Defaults to 'redirect'.\"\n</code></pre>"},{"location":"full_docs/unstyled_components/#reflex_clerk_api.unstyled_components.SignUpButton.force_redirect_url","title":"<code>force_redirect_url = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>If provided, this URL will always be redirected to after the user signs up. It's recommended to use the environment variable instead.</p>"},{"location":"full_docs/unstyled_components/#reflex_clerk_api.unstyled_components.SignUpButton.fallback_redirect_url","title":"<code>fallback_redirect_url = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The fallback URL to redirect to after the user signs up, if there's no redirect_url in the path already. Defaults to /. It's recommended to use the environment variable instead.</p>"},{"location":"full_docs/unstyled_components/#reflex_clerk_api.unstyled_components.SignUpButton.sign_in_force_redirect_url","title":"<code>sign_in_force_redirect_url = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>If provided, this URL will always be redirected to after the user signs in. It's recommended to use the environment variable instead.</p>"},{"location":"full_docs/unstyled_components/#reflex_clerk_api.unstyled_components.SignUpButton.sign_in_fallback_redirect_url","title":"<code>sign_in_fallback_redirect_url = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The fallback URL to redirect to after the user signs in, if there's no redirect_url in the path already. Defaults to /. It's recommended to use the environment variable instead.</p>"},{"location":"full_docs/unstyled_components/#reflex_clerk_api.unstyled_components.SignUpButton.mode","title":"<code>mode = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Determines what happens when a user clicks on the . Setting this to 'redirect' will redirect the user to the sign-up route. Setting this to 'modal' will open a modal on the current route. Defaults to 'redirect'."},{"location":"full_docs/unstyled_components/#reflex_clerk_api.unstyled_components.SignInButton","title":"<code>SignInButton</code>","text":"<p>               Bases: <code>ClerkBase</code></p> Source code in <code>custom_components/reflex_clerk_api/unstyled_components.py</code> <pre><code>class SignInButton(ClerkBase):\n    tag = \"SignInButton\"\n\n    force_redirect_url: str | None = None\n    \"If provided, this URL will always be redirected to after the user signs in. It's recommended to use the environment variable instead.\"\n\n    fallback_redirect_url: str | None = None\n    \"The fallback URL to redirect to after the user signs in, if there's no redirect_url in the path already. Defaults to /. It's recommended to use the environment variable instead.\"\n\n    sign_up_force_redirect_url: str | None = None\n    \"If provided, this URL will always be redirected to after the user signs up. It's recommended to use the environment variable instead.\"\n\n    sign_up_fallback_redirect_url: str | None = None\n    \"The fallback URL to redirect to after the user signs up, if there's no redirect_url in the path already. Defaults to /. It's recommended to use the environment variable instead.\"\n\n    mode: str | None = None\n    \"Determines what happens when a user clicks on the &lt;SignInButton&gt;. Setting this to 'redirect' will redirect the user to the sign-in route. Setting this to 'modal' will open a modal on the current route. Defaults to 'redirect'.\"\n</code></pre>"},{"location":"full_docs/unstyled_components/#reflex_clerk_api.unstyled_components.SignInButton.force_redirect_url","title":"<code>force_redirect_url = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>If provided, this URL will always be redirected to after the user signs in. It's recommended to use the environment variable instead.</p>"},{"location":"full_docs/unstyled_components/#reflex_clerk_api.unstyled_components.SignInButton.fallback_redirect_url","title":"<code>fallback_redirect_url = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The fallback URL to redirect to after the user signs in, if there's no redirect_url in the path already. Defaults to /. It's recommended to use the environment variable instead.</p>"},{"location":"full_docs/unstyled_components/#reflex_clerk_api.unstyled_components.SignInButton.sign_up_force_redirect_url","title":"<code>sign_up_force_redirect_url = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>If provided, this URL will always be redirected to after the user signs up. It's recommended to use the environment variable instead.</p>"},{"location":"full_docs/unstyled_components/#reflex_clerk_api.unstyled_components.SignInButton.sign_up_fallback_redirect_url","title":"<code>sign_up_fallback_redirect_url = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The fallback URL to redirect to after the user signs up, if there's no redirect_url in the path already. Defaults to /. It's recommended to use the environment variable instead.</p>"},{"location":"full_docs/unstyled_components/#reflex_clerk_api.unstyled_components.SignInButton.mode","title":"<code>mode = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Determines what happens when a user clicks on the . Setting this to 'redirect' will redirect the user to the sign-in route. Setting this to 'modal' will open a modal on the current route. Defaults to 'redirect'."},{"location":"full_docs/unstyled_components/#reflex_clerk_api.unstyled_components.SignOutButton","title":"<code>SignOutButton</code>","text":"<p>               Bases: <code>ClerkBase</code></p> Source code in <code>custom_components/reflex_clerk_api/unstyled_components.py</code> <pre><code>class SignOutButton(ClerkBase):\n    tag = \"SignOutButton\"\n\n    redirect_url: str | None = None\n    \"The full URL or path to navigate after successful sign-out.\"\n</code></pre>"},{"location":"full_docs/unstyled_components/#reflex_clerk_api.unstyled_components.SignOutButton.redirect_url","title":"<code>redirect_url = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The full URL or path to navigate after successful sign-out.</p>"},{"location":"full_docs/user_components/","title":"User components","text":""},{"location":"full_docs/user_components/#reflex_clerk_api.user_components.UserButton","title":"<code>UserButton</code>","text":"<p>               Bases: <code>ClerkBase</code></p> Source code in <code>custom_components/reflex_clerk_api/user_components.py</code> <pre><code>class UserButton(ClerkBase):\n    tag = \"UserButton\"\n\n    after_switch_session_url: str | None = None\n    \"The full URL or path to navigate to after a successful account change in a multi-session app.\"\n\n    # NOTE: `apperance.base_theme` does not work yet.\n    appearance: Appearance | None = None\n    \"\"\"Optional object to style your components. Will only affect Clerk components.\"\"\"\n\n    default_open: bool | None = None\n    \"Controls whether the &lt;UserButton /&gt; should open by default during the first render.\"\n\n    show_name: bool | None = None\n    \"Controls if the user name is displayed next to the user image button.\"\n\n    sign_in_url: str | None = None\n    \"The full URL or path to navigate to when the Add another account button is clicked. It's recommended to use the environment variable instead.\"\n\n    user_profile_mode: str | None = None\n    \"Controls whether selecting the Manage your account button will cause the &lt;UserProfile /&gt; component to open as a modal, or if the browser will navigate to the userProfileUrl where &lt;UserProfile /&gt; is mounted as a page. Defaults to: 'modal'.\"\n\n    user_profile_props: dict | None = None\n    \"Specify options for the underlying &lt;UserProfile /&gt; component. For example: {additionalOAuthScopes: {google: ['foo', 'bar'], github: ['qux']}}.\"\n\n    user_profile_url: str | None = None\n    \"The full URL or path leading to the user management interface.\"\n\n    fallback: rx.Component | None = None\n    \"An optional element to be rendered while the component is mounting.\"\n</code></pre>"},{"location":"full_docs/user_components/#reflex_clerk_api.user_components.UserButton.after_switch_session_url","title":"<code>after_switch_session_url = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The full URL or path to navigate to after a successful account change in a multi-session app.</p>"},{"location":"full_docs/user_components/#reflex_clerk_api.user_components.UserButton.appearance","title":"<code>appearance = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Optional object to style your components. Will only affect Clerk components.</p>"},{"location":"full_docs/user_components/#reflex_clerk_api.user_components.UserButton.default_open","title":"<code>default_open = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Controls whether the  should open by default during the first render.</p>"},{"location":"full_docs/user_components/#reflex_clerk_api.user_components.UserButton.show_name","title":"<code>show_name = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Controls if the user name is displayed next to the user image button.</p>"},{"location":"full_docs/user_components/#reflex_clerk_api.user_components.UserButton.sign_in_url","title":"<code>sign_in_url = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The full URL or path to navigate to when the Add another account button is clicked. It's recommended to use the environment variable instead.</p>"},{"location":"full_docs/user_components/#reflex_clerk_api.user_components.UserButton.user_profile_mode","title":"<code>user_profile_mode = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Controls whether selecting the Manage your account button will cause the  component to open as a modal, or if the browser will navigate to the userProfileUrl where  is mounted as a page. Defaults to: 'modal'.</p>"},{"location":"full_docs/user_components/#reflex_clerk_api.user_components.UserButton.user_profile_props","title":"<code>user_profile_props = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Specify options for the underlying  component. For example: {additionalOAuthScopes: {google: ['foo', 'bar'], github: ['qux']}}.</p>"},{"location":"full_docs/user_components/#reflex_clerk_api.user_components.UserButton.user_profile_url","title":"<code>user_profile_url = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The full URL or path leading to the user management interface.</p>"},{"location":"full_docs/user_components/#reflex_clerk_api.user_components.UserButton.fallback","title":"<code>fallback = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>An optional element to be rendered while the component is mounting.</p>"},{"location":"full_docs/user_components/#reflex_clerk_api.user_components.UserProfile","title":"<code>UserProfile</code>","text":"<p>               Bases: <code>ClerkBase</code></p> Source code in <code>custom_components/reflex_clerk_api/user_components.py</code> <pre><code>class UserProfile(ClerkBase):\n    tag = \"UserProfile\"\n\n    appearance: Appearance | None = None\n    \"\"\"Optional object to style your components. Will only affect Clerk components.\"\"\"\n\n    routing: str | None = None\n    \"The routing strategy for your pages. Defaults to 'path' for frameworks that handle routing, such as Next.js and Remix. Defaults to hash for all other SDK's, such as React.\"\n\n    path: str | None = None\n    \"The path where the component is mounted on when routing is set to path. It is ignored in hash-based routing. For example: /user-profile.\"\n\n    additional_oauth_scopes: dict | None = None\n    \"Specify additional scopes per OAuth provider that your users would like to provide if not already approved. For example: {google: ['foo', 'bar'], github: ['qux']}.\"\n\n    fallback: rx.Component | None = None\n    \"An optional element to be rendered while the component is mounting.\"\n</code></pre>"},{"location":"full_docs/user_components/#reflex_clerk_api.user_components.UserProfile.appearance","title":"<code>appearance = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Optional object to style your components. Will only affect Clerk components.</p>"},{"location":"full_docs/user_components/#reflex_clerk_api.user_components.UserProfile.routing","title":"<code>routing = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The routing strategy for your pages. Defaults to 'path' for frameworks that handle routing, such as Next.js and Remix. Defaults to hash for all other SDK's, such as React.</p>"},{"location":"full_docs/user_components/#reflex_clerk_api.user_components.UserProfile.path","title":"<code>path = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The path where the component is mounted on when routing is set to path. It is ignored in hash-based routing. For example: /user-profile.</p>"},{"location":"full_docs/user_components/#reflex_clerk_api.user_components.UserProfile.additional_oauth_scopes","title":"<code>additional_oauth_scopes = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Specify additional scopes per OAuth provider that your users would like to provide if not already approved. For example: {google: ['foo', 'bar'], github: ['qux']}.</p>"},{"location":"full_docs/user_components/#reflex_clerk_api.user_components.UserProfile.fallback","title":"<code>fallback = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>An optional element to be rendered while the component is mounting.</p>"}]}